{%- from 'fub.jinja' import  interface_method, key_parameters -%}
package {{ ctx.package }};

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.annotation.JsonProperty;

import akka.http.javadsl.marshallers.jackson.Jackson;
import akka.http.javadsl.server.AllDirectives;
import akka.http.javadsl.server.PathMatchers;
import akka.http.javadsl.server.Route;
{% for import in ctx.imports -%}
import {{ import }};
{%- endfor %}
public class {{ name }} extends AllDirectives {

  private static final Pattern PATH_MATCHER = Pattern.compile("([^=]*)");
  private static final Pattern KEY_MATCHER = Pattern.compile("=([^/]*)");

  private {{ ctx.interface_name }} backend;

  public {{ name }}({{ ctx.interface_name }} backend) {
    this.backend = backend;
  }
{% for name, rpc in ctx.rpcs.items() %}
  {%- if rpc.input and rpc.input.vars %}
  public static class Rpc{{ name | firstupper }} {
    {%- for name, input in rpc.input.vars.items() %}
    @JsonProperty("{{ input.name }}")
    public {{ input.java_type }} {{ name }};
    {%- endfor %}
  }
  {%- endif %}

  private Route {{ name }}() {
    return path("{{ name }}", () ->
    {%- if rpc.input and rpc.input.vars.items() %} entity(Jackson.unmarshaller(Rpc{{ name | firstupper }}.class),
      jsonContent ->{% endif %} backend.{{ name }}(
        {%- if rpc.input and rpc.input.vars %}{%- for name, input in rpc.input.vars.items() -%}
        jsonContent.{{ name }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}{% endif %})){%- if rpc.input and rpc.input.vars %}){% endif %};
  }
{% endfor %}
  public Route getRpcRoutes() {
    return post(() -> route(
        {%- for name in ctx.rpcs.keys() -%}
            {{ name }}(){% if not loop.last %},
            {% endif %}
        {%- endfor %}));
  }

  /**
   * This route matches a pathend, retrieves the return value from the supplier and
   * applies a JSON marshaller.
   *
   * @param value the supplier for the value to be marshalled
   * @param <T> the type of the value
   * @return the route
   */
  private <T> Route jsonMarshallOK(Supplier<T> value) {
    return pathEnd(() -> completeOK(value.get(), Jackson.marshaller()));
  }

  private Route extractKey(Function<String, Route> inner) {
    return rawPathPrefix(PathMatchers.segment(KEY_MATCHER), inner);
  }

  private Route listRoute(String prefix, Function<String, Route> inner) {
    return pathPrefix(prefix, () -> extractKey(inner));
  }

  private Route getValue(Supplier<Object> rootObj) {
    return pathPrefix(PathMatchers.segment(PATH_MATCHER), methodName -> pathEnd(() -> {
      try {
        Object obj = rootObj.get();
        Method method = obj.getClass().getMethod(toJavaName(methodName));
        return completeOK(method.invoke(obj), Jackson.marshaller());
      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
        return failWith(e);
      }
    }));
  }

  private static String toJavaName(String path) {
    return "get" + Stream.of(path.split("-"))
        .map(part -> part.substring(0, 1).toUpperCase() + part.substring(1))
        .collect(Collectors.joining());
  }

  {% set mod = ctx.module %}
  public Route get{{ mod.java_name }}Route() {
  return get(()-> route(
  {%- for name, child in mod.children.items() recursive %}
  {%- set is_list = 'list' == child.group and child.keys %}
  {%- if child.children -%}
  {%- if is_list -%}
    listRoute("{{ name }}", {{ child.keys[0] }}
  {%- else -%}
    pathPrefix("{{ name }}", ()
  {%- endif -%}
  -> route(jsonMarshallOK(() -> backend.{{ interface_method('get', name, child) }}( {{- key_parameters(child) -}} )),
  {#%- endif -%#}
  {%- if child.children -%} {{- loop(child.children.items()) }}{%- endif -%}
  {%- if child.children -%} getValue(() -> backend.{{ interface_method('get', name, child) }}( {{- key_parameters(child) -}} ))) {%- endif -%} )
  {%- if not (loop.depth == 1 and loop.last) -%} , {%- endif -%}
  {%- endif -%}

  {#%- if is_list -%}
    listRoute("{{ name }}", {{ child.keys[0] }} ->
  {%- else -%}
    pathPrefix("{{ name }}", () ->
  {%- endif -%}
  {%- if child.children -%} route({{- loop(child.children.items()) }},{%- endif -%}
    jsonMarshallOK(backend.{{ interface_method('get', name, child) }}( {{- key_parameters(child) -}} ))
    {%- if child.children -%} ) {%- endif -%}
    {%- if is_list %}, jsonMarshallOK(backend.{{ interface_method('get', name, child) }}( {{- key_parameters(child,only_parent=True) -}} ))
    {%- endif %})
    {%- if not loop.last -%} , {%- endif -%#}
  {%- endfor -%} )
  );
  }

}
