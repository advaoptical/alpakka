{%- from 'fub.jinja' import class_description -%}
package {{ ctx.package() }};

import java.io.Serializable;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
{%- if ctx.uses or ctx.vars %}
import com.fasterxml.jackson.annotation.JsonProperty;
{%- endif %}
{% if ctx.imports() %}
{% for import in ctx.imports()|sort -%}
import {{ import }};
{% endfor %}
{%- endif %}
{{ class_description(ctx.description) }}
@JsonInclude(Include.NON_NULL)
public class {{ name }} {% if ctx.uses|length == 1 %}extends {{ ctx.uses.keys() | first }} {% endif %}implements Serializable {

  private static final long serialVersionUID = 1L;
{% for key, var in ctx.vars.items() %}
{{ class_description(var.description) | indent(2, True) }}
  private final {{ var.java_type }} {{ key }};
{% endfor %}

  @JsonCreator
  public {{ name }} (
    {%- if ctx.uses|length == 1 -%}
    {% for key, var in ctx.inherited_vars().items() -%}
      @JsonProperty("{{ var.yang_name() }}") {{ var.java_type }} {{ key }}{% if not loop.last -%},
    {% endif %}
    {%- endfor %}{% if ctx.vars %},{% endif %}{% endif %}
    {% for key, var in ctx.vars.items() -%}
      @JsonProperty("{{ var.yang_name() }}") {{ var.java_type }} {{ key }}
    {%- if not loop.last -%},
    {% endif %}
    {%- endfor %}){
    {%- if ctx.uses|length == 1 %}
    super({% for key in ctx.inherited_vars().keys() %}{{ key }}{% if not loop.last %}, {% endif %}{% endfor %});{% endif -%}
    {%- for key, var in ctx.vars.items() %}
    this.{{ key }} = {{ key }}
      {%- if 'list' in var.group %} != null ? ImmutableList.copyOf({{ key }}) : ImmutableList.
        {%- if var.element_type %}<{{ var.element_type }}>
        {%- endif %}of()
      {%- endif %};{% endfor %}
  }

{% for key, var in ctx.vars.items() %}
  @JsonProperty("{{ var.yang_name() }}")
  public {{ var.java_type }} get{{ key|firstupper() }}(){
    return this.{{ key }};
  }
{% endfor %}

  @Override
  public int hashCode() {
    return Objects.hash(
      {%- if ctx.uses %}super.hashCode(){% if ctx.vars %}, {% endif %}{% endif %}
      {%- for key in ctx.vars.keys() %}{{ key }}{% if not loop.last %}, {% endif %}
      {%- endfor %});
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    {%- if ctx.vars %}
    {{ name }} that = ({{ name }}) o;
    {%- endif %}
    {%- if ctx.uses or ctx.vars %}
    return
      {%- if ctx.uses %} super.equals(o) {%- if ctx.vars %} &&
      {% endif %}{%- endif %}
    {%- for key in ctx.vars.keys() %} Objects.equals(this.{{ key }}, that.{{ key }})
      {%- if not loop.last %} &&
      {% endif %}
    {%- endfor %};
    {%- else %}
    return true;
    {%- endif %}
  }

}
