{%- from 'fub.jinja' import  interface_method -%}
package {{ ctx.package }};

import java.util.regex.Pattern;

import com.fasterxml.jackson.annotation.JsonProperty;

import akka.http.javadsl.marshallers.jackson.Jackson;
import akka.http.javadsl.server.AllDirectives;
import akka.http.javadsl.server.PathMatchers;
import akka.http.javadsl.server.Route;
{% for import in ctx.imports -%}
import {{ import }};
{%- endfor %}
public class {{ name }} extends AllDirectives {

  private {{ ctx.interface_name }} backend;

  public {{ name }} ({{ ctx.interface_name }} backend) {
    this.backend = backend;
  }
{% for name, rpc in ctx.rpcs.items() %}
  {%- if rpc.input and rpc.input.vars %}
  public static class Rpc{{ name | firstupper }} {
    {%- for name, input in rpc.input.vars.items() %}
    @JsonProperty("{{ input.name }}")
    public {{ input.java_type }} {{ name }};
    {%- endfor %}
  }
  {%- endif %}

  private Route {{ name }}() {
    return path("{{ name }}", () ->
    {%- if rpc.input and rpc.input.vars.items() %} entity(Jackson.unmarshaller(Rpc{{ name | firstupper }}.class),
      jsonContent ->{% endif %} backend.{{ name }}(
        {%- if rpc.input and rpc.input.vars %}{%- for name, input in rpc.input.vars.items() -%}
        jsonContent.{{ name }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}{% endif %})){%- if rpc.input and rpc.input.vars %}){% endif %};
  }
{% endfor %}
  public Route getRpcRoutes() {
    return post(() -> route(
        {%- for name in ctx.rpcs.keys() -%}
            {{ name }}(){% if not loop.last %},
            {% endif %}
        {%- endfor %}));
  }
  {% set mod = ctx.module %}
  public Route get{{ mod.java_name }}Route() {
  return get(()-> {% if mod.children | length > 1 %} route( {%endif%}
  {%- for name, child in mod.children.items() recursive %}
  pathPrefix({% if 'list' == child.group and child.keys%}PathMatchers.segment(Pattern.compile("{{ name }}=([^/]*)")), {{ child.keys[0] }} -> {% else %}"{{ name }}", () -> {% endif %}{% if child.children -%} route(
  {{- loop(child.children.items()) }},
  {%- endif -%} completeOK(backend.{{ interface_method('get', name, child) }}, Jackson.marshaller()))
{%- if child.children %}){% endif %}{% if not loop.last %},{% endif %}
{%- endfor %}{% if mod.children | length > 1 -%} ) {%- endif %}
  );
  }

}
