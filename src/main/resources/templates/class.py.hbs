from typing import Dict, Final{{#if yangListKeyNames}}, Iterator, List, Tuple{{/if}}

from .. import (
    YANGChoice, YANGChoiceCase, YANGContainer, YANGContainerMember,
    YANGLeafMember, YANGListItem, YANGListMember)


class {{{className}}}Meta(type):
    """
    Metaclass for YANG {{#if yangListKeyNames}}list item{{else}}container{{/if}} handler.

    YANG name: {{{yangName}}}
    """
{{#each containerMembers}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}
{{#each listMembers}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}
{{#each choiceMembers}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}

    class yang_{{#if yangListKeyNames}}list{{else}}container{{/if}}_descriptor(
            YANG{{#if yangListKeyNames}}List{{else}}Container{{/if}}Member):
        """
        YANG {{#if yangListKeyNames}}list{{else}}container{{/if}} descriptor class.

        YANG name: {{{yangName}}}
        """

        def __init__(self):
            super().__init__({{{className}}})

        def __get__(self, instance, owner=None) -> (
                '{{{className}}}Meta.yang_{{#if yangListKeyNames}}list{{else}}container{{/if}}_descriptor'):
            return super().__get__(instance, owner)

        def __call__(self) -> {{#if yangListKeyNames}}List['{{{className}}}']{{else}}'{{{className}}}'{{/if}}:
            pass
{{#if yangListKeyNames}}

        def __iter__(self, key) -> Iterator['{{{className}}}']:
            return super().__iter__()

        def __getitem__(self, key) -> '{{{className}}}':
            return super()[key]

        def __enter__(self) -> (
                '{{{className}}}Meta.yang_list_descriptor'):
            pass
{{else}}

        def __enter__(self) -> '{{{className}}}':
            pass
{{/if}}


class {{{className}}}(
        YANG{{#if yangListKeyNames}}ListItem{{else}}Container{{/if}},
        metaclass={{{className}}}Meta):
    """
    YANG {{#if yangListKeyNames}}list item{{else}}container{{/if}} handler.

    YANG name: {{{yangName}}}
    """

    _yang_name: Final[str] = '{{{yangName}}}'
    _yang_namespace: Final[str] = '{{{yangNamespace}}}'
    _yang_module_name: Final[str] = '{{{yangModule}}}'
{{#if yangListKeyNames}}

    _yang_list_key_names: Final[Tuple[str]] = (
        {{#each yangListKeyNames}}
        '{{{this}}}',
        {{/each}}
    )
{{/if}}

    _yang_leaf_members: Final[Dict[str, YANGLeafMember]] = {
{{#each leafMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := YANGLeafMember(
                '{{{this.yangName}}}',
                '{{{this.yangNamespace}}}',
                '{{{this.yangModule}}}')),
{{/each}}
    }

    _yang_container_members: Final[Dict[str, YANGContainerMember]] = {
{{#each containerMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := (  # YANGContainerMember(
                {{{../className}}}Meta.
                {{{this.className}}}.
                yang_container_descriptor())),
{{/each}}
    }

    _yang_list_members: Final[Dict[str, YANGListMember]] = {
{{#each listMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := (  # YANGListMember(
                {{{../className}}}Meta.
                {{{this.className}}}.
                yang_list_descriptor())),
{{/each}}
    }

    _yang_choices: Final[Dict[str, YANGChoice]] = None

    def __new__(cls, *args, **kwargs) -> '{{{className}}}':
        instance = super().__new__(cls)
        instance._yang_choices = {
{{#each choiceMembers}}

            '{{{this.yangName}}}':
                {{{../className}}}Meta.{{{this.className}}}(
                    instance),
{{/each}}
        }
        return instance
{{#each choiceMembers}}

    @property
    def {{{this.pythonName}}}(self) -> (
            {{{../className}}}Meta.{{{this.className}}}):
        return self._yang_choices['{{{this.yangName}}}']
{{/each}}
