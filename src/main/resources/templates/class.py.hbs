from typing import Dict, Tuple

from .. import (
    YANGContainer, YANGContainerMember, YANGLeafMember,
    YANGListItem, YANGListMember)


class {{{className}}}Meta(type):
    """Metaclass for REST/YANG/JSON container handler class."""

{{#each containerMembers}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}
{{#each listMembers}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}


class {{{className}}}(
{{#if yangListKeyNames}}
        YANGListItem,
{{else}}
        YANGContainer,
{{/if}}
        metaclass={{{className}}}Meta):

    _yang_name: str = '{{{yangName}}}'
    _yang_namespace: str = '{{{yangNamespace}}}'
    _yang_module_name: str = '{{{yangModule}}}'
{{#if yangListKeyNames}}

    _yang_list_key_names: Tuple[str] = (
        {{#each yangListKeyNames}}
        '{{{this}}}',
        {{/each}}
    )
{{/if}}

    _yang_leaf_members: Dict[str, YANGLeafMember] = {
{{#each leafMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := YANGLeafMember(
                '{{{this.yangName}}}',
                '{{{this.yangNamespace}}}',
                '{{{this.yangModule}}}')),
{{/each}}
    }

    _yang_container_members: Dict[str, YANGContainerMember] = {
{{#each containerMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := YANGContainerMember(
                {{{../className}}}Meta.{{{this.className}}},
                '{{{this.yangName}}}',
                '{{{this.yangNamespace}}}',
                '{{{this.yangModule}}}')),
{{/each}}
    }

    _yang_list_members: Dict[str, YANGListMember] = {
{{#each listMembers}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := YANGListMember(
                {{{../className}}}Meta.{{{this.className}}},
                '{{{this.yangName}}}',
                '{{{this.yangNamespace}}}',
                '{{{this.yangModule}}}')),
{{/each}}
    }
