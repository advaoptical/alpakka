from typing import Dict, Final

from .. import (
    YANGChoice, YANGChoiceCase, YANGContainer, YANGContainerMember,
    YANGLeafMember, YANGListItem, YANGListMember)


class {{{className}}}Meta(type):
    """
    Metaclass for YANG choice handler.

    YANG name: {{{yangName}}}
    """

{{#each cases}}
    from .{{{this.pythonName}}} import {{{this.className}}}
{{/each}}
{{#each cases}}

    class {{{this.pythonName}}}_case_descriptor(YANGChoiceCase):
        """
        YANG choice case descriptor class.

        YANG name: {{{yangName}}}
        """

        def __init__(self):
            super().__init__(
                {{{../className}}}Meta.{{{this.className}}})

        def __get__(self, instance, owner=None) -> (
                '{{{../className}}}Meta.{{{this.pythonName}}}_case_descriptor'):
            return super().__get__(instance, owner)

        def __call__(self) -> (
                '{{{../className}}}Meta.{{{this.className}}}'):
            pass

        def __enter__(self) -> (
                '{{{../className}}}Meta.{{{this.className}}}'):
            pass
{{/each}}


class {{{className}}}(YANGChoice, metaclass={{{className}}}Meta):
    """
    YANG choice handler.

    YANG name: {{{yangName}}}
    """

    _yang_name: Final[str] = '{{{yangName}}}'
    _yang_namespace: Final[str] = '{{{yangNamespace}}}'
    _yang_module_name: Final[str] = '{{{yangModule}}}'

    _yang_cases: Final[Dict[str, YANGChoiceCase]] = {
{{#each cases}}

        '{{{this.yangName}}}': (
            {{{this.pythonName}}} := (  # YANGChoiceCase(
                {{{../className}}}Meta.
                {{{this.pythonName}}}_case_descriptor())),
{{/each}}
    }
